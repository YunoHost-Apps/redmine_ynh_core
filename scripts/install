#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=/

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

final_path=/opt/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Check web path availability
ynh_webpath_available $domain $path_url
# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# INSTALL DEPENDENCIES
#=================================================

ynh_install_app_dependencies ruby-zip libssl-dev libyaml-dev libcurl4-openssl-dev ruby gem libapr1-dev libxslt1-dev checkinstall libxml2-dev ruby-dev vim libmagickwand-dev imagemagick postgresql postgresql-server-dev-all

#=================================================
# CREATE A POSTGRES DATABASE
#=================================================

db_name=$(ynh_sanitize_dbid $app)
db_pwd=$(ynh_string_random)
ynh_app_setting_set $app db_name $db_name
ynh_app_setting_set $app psqlpwd $db_pwd
ynh_psql_test_if_first_run
ynh_psql_create_db $db_name $db_name $db_pwd

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set $app final_path $final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create $app "$final_path"

#=================================================
# SPECIFIC SETUP
#=================================================
# CONFIGURE THE DATABASE
#=================================================

ynh_replace_string "__DB_NAME__" "$db_name" "$final_path/config/database.yml"
ynh_replace_string "__DB_PWD__" "$db_pwd" "$final_path/config/database.yml"

#=================================================
# SETUP PUMA, A RUBY SERVER
#=================================================

# Copy the configuration for puma
ynh_replace_string "__FINALPATH__" "$final_path" "$final_path/config/puma.rb"
ynh_replace_string "__APP__" "$app" "$final_path/config/puma.rb"

# Set a secret value
cp ../conf/secrets.yml "$final_path/config/secrets.yml"
ynh_replace_string "__SECRET__" "$(ynh_string_random)" "$final_path/config/secrets.yml"

# Set permissions to app files
chown -R $app: $final_path

# Install puma with gem
(cd "$final_path"
# Install bundler, a gems installer
gem install bundler
# Add puma to the dependencies
exec_as $app echo "gem 'puma'" >> Gemfile.local
# Install without documentation. Why ...?
exec_as $app echo "gem: --no-ri --no-rdoc" >> "$final_path/.gemrc"
# Install dependencies
exec_as $app bundle install --path vendor/bundle --without development test postgresql)

#=================================================
# PREPARE THE DATABASE
#=================================================

(cd "$final_path"
rake_exec="exec_as $app bin/rake RAILS_ENV=production"
$rake_exec generate_secret_token
$rake_exec db:migrate
$rake_exec REDMINE_LANG=en redmine:load_default_data)

#=================================================
# SETUP SYSVINIT
#=================================================

# Create a dedicated systemd config
# ynh_add_systemd_config
# Doesn't work with systemd... So I tried and success with sysvinit
cp ../conf/sysvinit.init /etc/init.d/$app
chmod +x /etc/init.d/$app
update-rc.d $app defaults

#=================================================
# STORE THE CHECKSUM OF THE CONFIG FILE
#=================================================

# Calculate and store the config file checksum into the app settings
# ynh_store_file_checksum "$final_path/CONFIG_FILE"

#=================================================
# ENABLE LDAP AUTH
#=================================================

# Seems you can only do that from the admin panel of redmine...
# So, there one other solution, fill directly the database.
# Good luck to who want to try to do that ;)
echo "For the first connection, please use the default admin user (admin:admin)" >&2

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Add a pids directory for the systemd script.
mkdir "$final_path/tmp/pids"

# Set permissions to app files
chown -R $app: $final_path

#=================================================
# SETUP LOGROTATE
#=================================================

mkdir -p /var/log/$app
chown -R $app: /var/log/$app

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# ADVERTISE SERVICE IN ADMIN PANEL
#=================================================

yunohost service add $app --log "/var/log/$app/puma.stderr.log"

#=================================================
# SETUP SSOWAT
#=================================================

ynh_app_setting_set $app unprotected_uris "/"

#=================================================
# RELOAD NGINX
#=================================================

systemctl reload nginx

#=================================================
# START PUMA AND REDMINE
#=================================================

systemctl start $app
